const config = require('../config');
const { cmd, commands } = require('../command');
const { runtime } = require('../lib/functions');

// ‚û§ Commande pour afficher les commandes d'une cat√©gorie sp√©cifique
cmd({
    pattern: "showmenu",
    hidden: true
}, async (conn, mek, m, { args, from }) => {
    const category = args[0];
    const cmdsInCat = commands.filter(cmd => cmd.category === category);
    if (!cmdsInCat.length) {
        return conn.sendMessage(from, { text: `‚ùå …¥·¥è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös “ì·¥è·¥ú…¥·¥Ö …™…¥ '${category}'` }, { quoted: m });
    }

    let text = `üìÇ *·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös …™…¥ ${category.toUpperCase()}*\n\n`;
    for (const cmd of cmdsInCat) {
        text += `‚û§ ${cmd.pattern}\n`;
    }

    await conn.sendMessage(from, { text }, { quoted: m });
});

// ‚û§ Menu intelligent avec boutons
cmd({
    pattern: "bn",
    desc: "Show smart button menu",
    category: "tools",
    filename: __filename
}, async (conn, mek, m, { from, prefix }) => {
    const picUrl = "https://files.catbox.moe/w1l8b0.jpg";

    const filtered = commands.filter(cmd => !["menu", "xbot", "misc"].includes(cmd.category));
    const categories = [...new Set(filtered.map(cmd => cmd.category))];

    const sections = categories.map((cat, index) => {
        return {
            title: index === 0 ? "s·¥á ü·¥á·¥Ñ·¥õ ·¥Ä ·¥ç·¥á…¥·¥ú" : undefined,
            rows: [
                {
                    header: 'Menu',
                    title: cat.charAt(0).toUpperCase() + cat.slice(1),
                    description: `·¥õ ú…™s …™s “ì·¥è Ä ${cat} ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös`,
                    buttonId: `${prefix}showmenu`
                }
            ]
        };
    });

    const buttonText = m.text?.toLowerCase();

    if (buttonText === `${prefix}ping`) {
        const start = new Date().getTime();
        const reactionEmojis = ['üî•', '‚ö°', 'üöÄ', 'üí®', 'üéØ', 'üéâ', 'üåü', 'üí•', 'üïê', 'üîπ'];
        const textEmojis = ['üíé', 'üèÜ', '‚ö°Ô∏è', 'üöÄ', 'üé∂', 'üå†', 'üåÄ', 'üî±', 'üõ°Ô∏è', '‚ú®'];
        const reactionEmoji = reactionEmojis[Math.floor(Math.random() * reactionEmojis.length)];
        let textEmoji = textEmojis[Math.floor(Math.random() * textEmojis.length)];
        while (textEmoji === reactionEmoji) {
            textEmoji = textEmojis[Math.floor(Math.random() * textEmojis.length)];
        }

        await conn.sendMessage(from, { react: { text: textEmoji, key: mek.key } });

        const end = new Date().getTime();
        const responseTime = (end - start) / 1000;
        const text = `> *MEGALODON-MD SPEED: ${responseTime.toFixed(2)}·¥çs ${reactionEmoji}*`;
        return await conn.sendMessage(from, { text: text }, { quoted: mek });
    }

    if (buttonText === "alive" || buttonText === `${prefix}alive`) {
        return await conn.sendMessage(from, { text: "*‚úÖ …™ ·¥Ä·¥ç ·¥Ä ü…™·¥†·¥á ·¥Ä…¥·¥Ö  Ä·¥á·¥Ä·¥Ö è ·¥õ·¥è s·¥á Ä·¥†·¥á  è·¥è·¥ú!*" }, { quoted: mek });
    }

    await conn.sendMessage(from, {
        image: { url: picUrl },
        caption: "üìã *·¥ç·¥Ä…™…¥ ·¥ç·¥á…¥·¥ú*\n\n> Select ·¥Ä ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥ç·¥á…¥·¥ú  ô·¥á ü·¥è·¥°.",
        footer: "> …¥·¥á·¥° ·¥ç·¥á…¥·¥ú - 2025",
        buttons: [
            {
                buttonId: `${prefix}ping`,
                buttonText: { displayText: 'PING' },
                type: 1
            },
            {
                buttonId: `${prefix}alive`,
                buttonText: { displayText: 'ALIVE' },
                type: 1
            },
            {
                buttonId: `${prefix}uptime`,
                buttonText: { displayText: 'üìã s ú·¥è·¥° ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä…™·¥ás' },
                type: 4,
                nativeFlowInfo: {
                    name: 'single_select',
                    paramsJson: JSON.stringify({
                        title: 's·¥á ü·¥á·¥Ñ·¥õ ·¥ç·¥á…¥·¥ú',
                        sections: sections
                    })
                }
            }
        ],
        headerType: 4,
        viewOnce: true
    }, { quoted: m });
});
