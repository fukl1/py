const { cmd } = require('../command');
const config = require('../config');


//SHONU X MD ü§ç
//CONTACT VCARD SAVE PLUGINS üí•
//=======SUCCESS =======
//======================
//=========================

cmd({
    pattern: "csave",
    react: "üíæ",
    desc: "·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è s·¥Ä·¥†·¥á ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ “ì Ä·¥è·¥ç …™…¥ ô·¥èx ·¥ç·¥áss·¥Ä…¢·¥á ·¥ús…™…¥…¢ ·¥° ú·¥Ä·¥õs·¥Ä·¥ò·¥ò ·¥ò Ä·¥è“ì…™ ü·¥á …¥·¥Ä·¥ç·¥á",
    category: "utility",
    use: ".·¥Ñs·¥Ä·¥†·¥á",
    filename: __filename
},
async (conn, mek, m, { from, l, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, isAdmins, reply }) => {
    try {
        // Check if the message is from a private chat (not a group)
        if (isGroup) return;

        // Get sender's profile details
        let userProfile = await conn.fetchStatus(sender).catch(() => ({ status: pushname || null }));
        let contactName = pushname || userProfile.status; // Prioritize pushname, then status
        if (!contactName) throw new Error('…¥·¥è ·¥° ú·¥Ä·¥õs·¥Ä·¥ò·¥ò ·¥ò Ä·¥è“ì…™ ü·¥á …¥·¥Ä·¥ç·¥á ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á'); // Ensure profile name exists
        let phoneNumber = sender.split("@")[0]; // Extract phone number from sender ID

        // Fetch profile picture
        let profilePicUrl;
        try {
            profilePicUrl = await conn.profilePictureUrl(sender, 'image');
        } catch (e) {
            profilePicUrl = null; // Fallback if no profile picture
        }

        // Create vCard with WhatsApp profile name
        let vcard = `BEGIN:VCARD\nVERSION:3.0\nFN:${contactName}\nTEL;type=CELL;type=VOICE;waid=${phoneNumber}:+${phoneNumber}\nEND:VCARD\n`;

        // Save vCard to file
        let nmfilect = './new_contact.vcf';
        fs.writeFileSync(nmfilect, vcard.trim());

        // Send vCard with caption
        await conn.sendMessage(from, {
            document: fs.readFileSync(nmfilect),
            mimetype: 'text/vcard',
            fileName: `${contactName}.vcf`,
            caption: `üìã *·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ s·¥Ä·¥†·¥á·¥Ö!*\n…¥·¥Ä·¥ç·¥á: *${contactName}*\n…¥·¥ú·¥ç ô·¥á Ä: *+${phoneNumber}*\n\nYo  ô Ä·¥è, …™ s·¥Ä·¥†·¥á·¥Ö  è·¥è·¥ú! s·¥Ä·¥†·¥á ·¥ç·¥á ·¥õ·¥è·¥è! üòé`
        }, { ephemeralExpiration: 86400, quoted: m });

        // Send profile picture as a separate message if available
        if (profilePicUrl) {
            await conn.sendMessage(from, {
                image: { url: profilePicUrl },
                caption: ` ú·¥á Ä·¥á's  è·¥è·¥ú Ä ·¥ò Ä·¥è“ì…™ ü·¥á ·¥ò…™·¥Ñ! üòé`
            }, { ephemeralExpiration: 86400, quoted: m });
        }

        // Clean up temporary file
        fs.unlinkSync(nmfilect);

        // Send success reaction
        await conn.sendMessage(from, { react: { text: `‚úÖ`, key: mek.key } });

    } catch (e) {
        reply('*·¥è·¥è·¥òs, s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢! üòï*');
        l(e); // Log error for debugging
    }
});
