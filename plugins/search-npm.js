const axios = require("axios");
const { cmd } = require("../command");

cmd({
    pattern: "npm",
    alias: ["npmpkg", "npmsearch"],
    react: "üì¶",
    desc: "Search for NPM packages",
    category: "search",
    use: ".npm <package-name>",
    filename: __filename
}, async (conn, m, mek, { from, q, reply }) => {
    try {
        if (!q) return reply("‚ùå ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä…¥ …¥·¥ò·¥ç ·¥ò·¥Ä·¥Ñ·¥ã·¥Ä…¢·¥á …¥·¥Ä·¥ç·¥á!");

        const processingMsg = await reply("üîç s·¥á·¥Ä Ä·¥Ñ ú…™…¥…¢ …¥·¥ò·¥ç  Ä·¥á…¢…™s·¥õ Ä è...");

        const apiUrl = `https://api.giftedtech.web.id/api/search/npmsearch?apikey=gifted&packagename=${encodeURIComponent(q)}`;
        const response = await axios.get(apiUrl, { timeout: 10000 });

        if (!response.data?.success || !response.data?.result) {
            return reply("‚ùå ·¥ò·¥Ä·¥Ñ·¥ã·¥Ä…¢·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö ·¥è Ä ·¥Ä·¥ò…™ ·¥á Ä Ä·¥è Ä");
        }

        const pkg = response.data.result;
        
        let message = `üì¶ \`ùêçùêèùêå ùêèùêÄùêÇùêäùêÄùêÜùêÑ ùêàùêçùêÖùêé\` \n\n` +
                     `‚ú® *…¥·¥Ä·¥ç·¥á:* ${pkg.name || "N/A"}\n` +
                     `üìù *·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥:* ${pkg.description || "N/A"}\n` +
                     `üè∑Ô∏è *·¥†·¥á Äs…™·¥è…¥:* ${pkg.version || "N/A"}\n` +
                     `üìÖ *·¥ò·¥ú ô ü…™s ú·¥á·¥Ö:* ${pkg.publishedDate || "N/A"}\n` +
                     `üë§ *·¥è·¥°…¥·¥á Ä:* ${pkg.owner || "N/A"}\n` +
                     `üìú * ü…™·¥Ñ·¥á…¥s·¥á:* ${pkg.license || "N/A"}\n\n` +
                     `üîó *·¥ò·¥Ä·¥Ñ·¥ã·¥Ä…¢·¥á  ü…™…¥·¥ã:* ${pkg.packageLink || "N/A"}\n` +
                     `üè† * ú·¥è·¥ç·¥á·¥ò·¥Ä…¢·¥á:* ${pkg.homepage || "N/A"}\n` +
                     `üì• *·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö:* ${pkg.downloadLink || "N/A"}\n\n`;

        if (pkg.keywords?.length > 0) {
            message += `üè∑Ô∏è *·¥ã·¥á è·¥°·¥è Ä·¥Ös:* ${pkg.keywords.join(", ")}\n`;
        }

        message += `\n> …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á·¥Ö  ô è ·¥Ö è ô è ·¥õ·¥á·¥Ñ ú`;

        // Send the result
        await conn.sendMessage(from, { 
            text: message,
            contextInfo: {
                externalAdReply: {
                    title: pkg.name,
                    body: pkg.description || "NPM package",
                    thumbnail: await (await axios.get('https://files.catbox.moe/w1l8b0.jpg', { responseType: 'arraybuffer' })).data,
                    sourceUrl: pkg.packageLink || "https://www.npmjs.com"
                }
            }
        }, { quoted: mek });

        // Delete processing message
        await conn.sendMessage(from, { delete: processingMsg.key });

    } catch (error) {
        console.error("NPM search error:", error);
       // reply(`‚ùå Error: ${error.response?.status === 404 ? "Package not found" : "Search failed"}`);
    }
});
