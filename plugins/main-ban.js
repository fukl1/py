const fs = require("fs");
const path = require("path");
const { cmd } = require("../command");

const protectedNumbers = [
    "50948702213@s.whatsapp.net"
];

cmd({
    pattern: "ban",
    alias: ["blockuser", "addban"],
    desc: "Ban a user from using the bot",
    category: "owner",
    react: "‚õî",
    filename: __filename
}, async (conn, mek, m, { from, args, isCreator, reply, isOwner }) => {
    try {
        if (!isOwner && !isCreator) return reply("_‚ùó·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!_");

        let target = m.mentionedJid?.[0] 
            || (m.quoted?.sender ?? null)
            || (args[0]?.replace(/[^0-9]/g, '') + "@s.whatsapp.net");

        if (!target) return reply("·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä …¥·¥ú·¥ç ô·¥á Ä ·¥è Ä ·¥õ·¥Ä…¢/ Ä·¥á·¥ò ü è ·¥Ä ·¥ús·¥á Ä.");

        if (protectedNumbers.includes(target)) {
            return reply("*…™ s…™·¥ç·¥ò ü è ·¥Ñ·¥Ä…¥'·¥õ  ô·¥Ä…¥ ·¥ç è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä*!üíÄ");
        }

        let banned = JSON.parse(fs.readFileSync("./lib/ban.json", "utf-8"));

        if (banned.includes(target)) {
            return reply("·¥õ ú…™s ·¥ús·¥á Ä …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  ô·¥Ä…¥…¥·¥á·¥Ö.");
        }

        banned.push(target);
        fs.writeFileSync("./lib/ban.json", JSON.stringify([...new Set(banned)], null, 2));

        await conn.sendMessage(from, {
            image: { url: config.MENU_IMAGE_URL },
            caption: `‚õî ·¥ús·¥á Ä  ú·¥Äs  ô·¥á·¥á…¥  ô·¥Ä…¥…¥·¥á·¥Ö “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ.`
        }, { quoted: mek });

    } catch (err) {
        console.error(err);
        reply("‚ùå Error: " + err.message);
    }
});

cmd({
    pattern: "unban",
    alias: ["removeban"],
    desc: "Unban a user",
    category: "owner",
    react: "‚úÖ",
    filename: __filename
}, async (conn, mek, m, { from, args, isCreator, reply, isOwner }) => {
    try {
        if (!isOwner && !isCreator) return reply("_‚ùó·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!_");

        let target = m.mentionedJid?.[0] 
            || (m.quoted?.sender ?? null)
            || (args[0]?.replace(/[^0-9]/g, '') + "@s.whatsapp.net");

        if (!target) return reply("·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä …¥·¥ú·¥ç ô·¥á Ä ·¥è Ä ·¥õ·¥Ä…¢/ Ä·¥á·¥ò ü è ·¥Ä ·¥ús·¥á Ä.");

        let banned = JSON.parse(fs.readFileSync("./lib/ban.json", "utf-8"));

        if (!banned.includes(target)) {
            return reply("‚ùå ·¥õ ú…™s ·¥ús·¥á Ä …™s …¥·¥è·¥õ  ô·¥Ä…¥…¥·¥á·¥Ö.");
        }

        const updated = banned.filter(u => u !== target);
        fs.writeFileSync("./lib/ban.json", JSON.stringify(updated, null, 2));

        await conn.sendMessage(from, {
            image: { url: config.MENU_IMAGE_URL },
            caption: `‚úÖ ·¥ús·¥á Ä  ú·¥Äs  ô·¥á·¥á…¥ ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö.`
        }, { quoted: mek });

    } catch (err) {
        console.error(err);
        reply("‚ùå Error: " + err.message);
    }
});

cmd({
    pattern: "listban",
    alias: ["banlist", "bannedusers"],
    desc: "List all banned users",
    category: "owner",
    react: "üìã",
    filename: __filename
}, async (conn, mek, m, { from, isCreator, reply, isOwner }) => {
    try {
        if (!isOwner && !isCreator) return reply("_‚ùó·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!_");

        let banned = JSON.parse(fs.readFileSync("./lib/ban.json", "utf-8"));
        banned = [...new Set(banned)];

        if (banned.length === 0) return reply("‚úÖ …¥·¥è  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs “ì·¥è·¥ú…¥·¥Ö.");

        let msg = "`‚õî  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs:`\n\n";
        banned.forEach((id, i) => {
            msg += `${i + 1}. ${id.replace("@s.whatsapp.net", "")}\n`;
        });

        await conn.sendMessage(from, {
            image: { url: config.MENU_IMAGE_URL },
            caption: msg
        }, { quoted: mek });
    } catch (err) {
        console.error(err);
        reply("‚ùå Error: " + err.message);
    }
});
