const { cmd } = require('../command');
const axios = require('axios');
const Config = require('../config');

cmd(
    {
        pattern: 'ainfo',
        alias: ['animeinfo', 'anidetails'],
        desc: 'Get anime information from MyAnimeList',
        category: 'search',
        react: 'üå∏',
        use: '<anime title>',
        filename: __filename,
    },
    async (conn, mek, m, { text, reply }) => {
        try {
            if (!text) return reply(`üå∏ *·¥ús·¥Ä…¢·¥á:* ${Config.PREFIX}mal <anime title>\nExample: ${Config.PREFIX}mal Summertime Render`);

            await conn.sendMessage(mek.chat, { react: { text: "‚è≥", key: mek.key } });

            // Fetch MAL data
            const apiUrl = `https://lance-frank-asta.onrender.com/api/mal?title=${encodeURIComponent(text)}`;
            const { data } = await axios.get(apiUrl);

            if (!data?.title) {
                return reply('üå∏ *·¥Ä…¥…™·¥ç·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!* ·¥õ Ä è ·¥Ä ·¥Ö…™“ì“ì·¥á Ä·¥á…¥·¥õ ·¥õ…™·¥õ ü·¥á');
            }

            // Format the information
            const malInfo = `üéå *${data.title}* (${data.japanese || 'N/A'})\n\n` +
                           `üì∫ *·¥õ è·¥ò·¥á:* ${data.type || 'N/A'}\n` +
                           `üìä *s·¥õ·¥Ä·¥õ·¥ús:* ${data.status || 'N/A'}\n` +
                           `üóì *·¥Ä…™ Ä·¥á·¥Ö:* ${data.aired || 'N/A'}\n` +
                           `üéû *·¥á·¥ò…™s·¥è·¥Ö·¥ás:* ${data.episodes || 'N/A'} (${data.duration || 'N/A'})\n\n` +
                           `‚≠ê *s·¥Ñ·¥è Ä·¥á:* ${data.score || 'N/A'} (${data.scoreStats || 'N/A'})\n` +
                           `üèÜ * Ä·¥Ä…¥·¥ã·¥á·¥Ö:* ${data.ranked || 'N/A'}\n` +
                           `üë• *·¥ç·¥á·¥ç ô·¥á Äs:* ${data.members || 'N/A'}\n\n` +
                           `üé≠ *…¢·¥á…¥ Ä·¥ás:* ${data.genres || 'N/A'}\n` +
                           `üè¢ *s·¥õ·¥ú·¥Ö…™·¥ès:* ${data.studios || 'N/A'}\n\n` +
                           `üìú *·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥:* ${data.description?.substring(0, 200) || 'No description'}${data.description?.length > 200 ? '...' : ''}\n\n` +
                           `üîó *·¥ç·¥Ä ü ·¥ú Ä ü:* ${data.url || 'Not available'}\n\n` +
                           `> ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö è ô è ·¥õ·¥á·¥Ñ ú`;

            // Send the anime info with poster
            await conn.sendMessage(mek.chat, {
                image: { url: data.picture || 'https://i.imgur.com/3QNxQ4a.png' },
                caption: malInfo,
                contextInfo: {
                    externalAdReply: {
                        title: data.title,
                        body: `‚≠ê ${data.score} | ${data.type}`,
                        thumbnailUrl: data.picture || 'https://i.imgur.com/3QNxQ4a.png',
                        mediaType: 1,
                        mediaUrl: data.url,
                        sourceUrl: data.url
                    }
                }
            }, { quoted: mek });

            await conn.sendMessage(mek.chat, { react: { text: "‚úÖ", key: mek.key } });

        } catch (error) {
            console.error('MAL Error:', error);
            await conn.sendMessage(mek.chat, { react: { text: "‚ùå", key: mek.key } });
            reply('üå∏ *Error:* ' + (error.message || 'Failed to fetch MAL data'));
        }
    }
);
